# Date and time functions
# 1. CurrentTimestamp : In DataStage Returns a time stamp that gives the date and time that the job runs.
# ANSWER:

# DataStage Function => ADF Function
#CurrentTimestamp() => currentUTC()

# python Code
def CurrentTimestamp_() :
    y = currentUTC()
    print(y)
CurrentTimestamp_()


# 2. DateFromDaysSince2 : Returns a date object by adding an integer to a baseline date. 
# The integer can be negative to return a date that is earlier than the baseline date.
# ANSWER:

# DataStage Function => ADF Function
# DateFromDaysSince2(1,"2022-08-18") => @formatDateTime(adddays((2022-08-18),1),'yyyy-MM-dd')

# python Code
def DateFromDaysSince2_() :
    y = @formatDateTime(adddays((2022-08-18),1),'yyyy-MM-dd')
    print(y)
DateFromDaysSince2_()

# 3. MinutesFromTime : Returns the minutes portion of a time.
# ANSWER: IN ADF, HERE first we add a default date with the string value of "HH:MM:SS" then we convert it into the timestemp and extract minutes fron it

# DataStage Function => ADF Function
MinutesFromTime("22:30:52") => minute(toTimestamp(concat('1900-01-01','22:30:52')))

# python Code
def MinutesFromTime_() :
    y = minute(toTimestamp(concat('1900-01-01','22:30:52')))
    print(y)
CurrentTimestamp_()

# 4. TimetFromTimestamp : Returns a UNIX time_t value from the given time stamp.
# ANSWER: 

# DataStage Function => ADF Function
TimestampFromTimet("2009–02–13 23:31:30") => toLong( currentUTC() - toTimestamp('1970-01-01 00:00:00.000', 'yyyy-MM-dd HH:mm:ss.SSS') ) * 1000l


# python Code
def TimetFromTimestamp_() :
    y = toLong( currentUTC() - toTimestamp('1970-01-01 00:00:00.000', 'yyyy-MM-dd HH:mm:ss.SSS') ) * 1000l
    print(y)
TimetFromTimestamp_()


################################################
#Logical functions 

# 5. BitAnd ; Returns the bitwise AND of the two integer arguments.
# ANSWER: 

# DataStage Function => ADF Function
BitAnd(352,400) => bitwiseAnd(352,400)

# python Code
def BitAnd_() :
    y = bitwiseAnd(352,400)
    print(y)
BitAnd_()

# 6. BitCompress ; Returns the integer made from the string argument, which contains a binary representation of "1"s and "0"s.
# ANSWER: 

# DataStage Function => ADF Function
BitCompress("0101100000") => toBinary('0101100000')


# python Code
def BitCompress_() :
    y = toBinary('0101100000')
    print(y)
BitCompress_()


################################################
#Mathematical functions

# 7. Abs : Returns the absolute value of any numeric expression. The absolute value of an expression is its unsigned magnitude.
# ANSWER: 

# DataStage Function => ADF Function
Abs(12-34) => Abs(12-34)

# python Code
def Abs_() :
    y = Abs(12-34)
    print(y)
Abs_()


# 8. Floor : Calculates the largest integer value less than or equal to the given decimal value.
# ANSWER: 

# DataStage Function => ADF Function
Floor(203.25) => Floor(203.25)

# python Code
def floor_() :
    y = floor(203.25)
    print(y)
floor_()


# 9. Random : Returns a random number between 0 and 232-1.
# ANSWER: 

# DataStage Function => ADF Function
Random() => random()

# python Code
def random_() :
    y = random()
    print(y)
random_()

################################################
#Null handling functions


# 10. IsNotNull : Returns true when an expression does not evaluate to the null value.
# ANSWER: 

# DataStage Function => ADF Function
IsNotNull('KUMAAR') => CASE('KUMAAR' == NULL, FALSE, TRUE)

# python Code
def IsNotNull_() :
    y = CASE('KUMAAR' == NULL, FALSE, TRUE)
    print(y)
IsNotNull_()

# 11. NullToValue : Returns the specified value if the input column is null, otherwise returns the input column value.
# ANSWER: 

# DataStage Function => ADF Function
IsNotNull(Name) => iif(isNull(Name), 'Unknown', Name)

# python Code
def IsNotNull_() :
    y = iif(isNull(Name), 'Unknown', Name)
    print(y)
IsNotNull_()

################################################
#Number functions


# 12. AsDouble : Treat the given number as a double.
# ANSWER: 

# DataStage Function => ADF Function
AsDouble(56/4.32) => toDouble(56/4.32)

# python Code
def AsDouble_() :
    y = toDouble(56/4.32)
    print(y)
AsDouble_()

# 13. MantissaFromDecimal :Returns the mantissa from the given decimal.
# ANSWER: 

# DataStage Function => ADF Function
MantissaFromDecimal(56/4.32) => toDouble(56/4.32)

# python Code
def AsDouble_() :
    y = toDouble(56/4.32)
    
    print(y)
AsDouble_()
